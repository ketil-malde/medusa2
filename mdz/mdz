#!/usr/bin/env python3

import medusa as m
import sys
import os
import argparse
from medusa.util import error
from medusa.datasets import Datasets

usage = 'Usage: mdz {validate|import|export} DIR'

def get_storage(create=False):
    # Read config file
    config = {}
    with open(os.path.expanduser('~/.mdzrc')) as f:
        for line in f:
            name, var = line.partition("=")[::2]
            config[name.strip()] = var.strip()

    # Env variables can overrule
    if 'MDZREPO' in os.environ: config['repository'] = os.environ['MDZREPO']
    if 'MDZUSER' in os.environ: config['userid'] = os.environ['MDZUSER']
    if 'MDZKEY' in os.environ: config['rsakey'] = os.environ['MDZKEY']

    # Sanity check
    if 'repository' not in config.keys(): error('No repository specified (set $MDZREPO)')

    return Datasets(config, create)

def initialize(args):
    '''Initialize a new repository, adding ourselves as a user.'''
    get_storage(create=True)

def validate(args):
    print(args)
    for f in args.FILE:
        print(f'Dataset "{f}":\t{"ok" if m.validate(f) else "FAILED"}')

def insert(args):
    db = get_storage()
    for f in args.FILE:
        print(f'Importing "{f}"')
        h = db.insert(f)
        print(f'Hash: {h}')

def export(args):
    db = get_storage()
    for h in args.hashes:
        print(f'Exporting "{h}"')
        db.export(h)

def list(args):
    db = get_storage()
    for d in db.list():
        print(d)
        if 'Insert' in d.keys():
            h = d['Insert']
            print(f'{h[:12]} ->\n   {db._store.gets(h).splitlines()[0]}')

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print(usage)
        exit(0)

    p = argparse.ArgumentParser(description='Manage Medusa data sets')
    ps = p.add_subparsers()
    # ps.default = 'usage'

    # Validation
    val = ps.add_parser('validate', description='Validate a data set')
    val.add_argument('FILE', nargs='+', help='data set directories.')
    val.set_defaults(func=validate)

    # Importing
    imp = ps.add_parser('import', description='Import datasets into storage')
    imp.add_argument('FILE', nargs='+', help='data set directories.')
    imp.set_defaults(func=insert)

    # Exporting
    exp = ps.add_parser('export', description='Export datasets into storage')
    exp.add_argument('hashes', nargs='+', help='data set hashes.')
    exp.set_defaults(func=export)

    # Listing repo
    lst = ps.add_parser('list', description='Show stored datasets')
    lst.set_defaults(func=list)

    init = ps.add_parser('init', description='Initialize a repository')
    init.set_defaults(func=initialize)

    # Run
    args = p.parse_args()
    args.func(args)
