#!/usr/bin/env python3

import medusa as m
import sys
import os
import argparse

from medusa.util import error
from medusa.datasets import Datasets  # , read_ssh_key, read_ssh_pkey
from medusa.config import get_config

usage = 'Usage: mdz {validate|import|export} DIR'

def get_storage(create=False):
    # Read config file
    config = get_config()

    # Sanity check
    if 'repository' not in config.keys(): error('No repository specified (set $MDZREPO)')
    return Datasets(config, create)

def initialize(args):
    '''Initialize a new repository, adding ourselves as a user.'''
    get_storage(create=True)

def validate(args):
    '''Validate a dataset'''
    print(args)
    for f in args.FILE:
        print(f'Dataset "{f}":\t{"ok" if m.validate(f) else "FAILED"}')

def insert(args):
    '''Add a new dataset to the repository'''
    db = get_storage()
    for f in args.FILE:
        print(f'Importing "{f}"')
        h = db.insert(f)
        print(f'Hash: {h}')

def export(args):
    '''Export a dataset from the repository'''
    db = get_storage()
    for h in args.hashes:
        print(f'Exporting "{h}"')
        db.export(h)

def log(args):
    '''List the entries in the ledger'''
    db = get_storage()
    for d in db.list():
        print(d)

def search(args):
    '''Search for datasets matching criteria'''
    db = get_storage()
    for d in db.list():
        if 'Insert' in d.keys():
            h = d['Insert']
            print(f'{h[:12]} -> {db._store.gets(h).splitlines()[0]}')

def adduser(args):
    '''Add a new set of user credentials'''
    db = get_storage()
    # args?
    if args.keyfile is not None and os.path.exists(args.keyfile):
        with open(args.keyfile, 'r') as f:
            ssh_pkey = f.read()
    elif args.ssh_key is not None:
        ssh_pkey = args.ssh_key
    else:
        error('SSH key not defined')

    db.adduser(args.userid, args.username, ssh_pkey)

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print(usage)
        exit(0)

    p = argparse.ArgumentParser(description='Manage Medusa data sets')
    ps = p.add_subparsers()
    # ps.default = 'usage'

    # Validation
    val = ps.add_parser('validate', description='Validate a data set')
    val.add_argument('FILE', nargs='+', help='data set directories.')
    val.set_defaults(func=validate)

    # Importing
    imp = ps.add_parser('import', description='Import datasets into storage')
    imp.add_argument('FILE', nargs='+', help='data set directories.')
    imp.set_defaults(func=insert)

    # Exporting
    exp = ps.add_parser('export', description='Export datasets into storage')
    exp.add_argument('hashes', nargs='+', help='data set hashes.')
    exp.set_defaults(func=export)

    # Listing repo
    lst = ps.add_parser('log', description='Show stored datasets')
    lst.set_defaults(func=log)

    # Searching a repo
    srch = ps.add_parser('search', description='Show stored datasets')
    srch.set_defaults(func=search)

    # Initializing a repo
    init = ps.add_parser('init', description='Initialize a repository')
    init.set_defaults(func=initialize)

    uadd = ps.add_parser('adduser', description='Add a set of user credentials')
    uadd.add_argument('userid', help='User id (typically email address)')
    uadd.add_argument('username', help='Full user name')
    uadd.add_argument('--ssh_key', '-K', help='SSH public key', default=None, type=str)
    uadd.add_argument('--keyfile', '-k', help='Path to SSH public key', default=None, type=str)
    uadd.set_defaults(func=adduser)

    # Run it
    args = p.parse_args()
    args.func(args)
